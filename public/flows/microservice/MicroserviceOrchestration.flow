attributes:
  ArrowStyle: ArrowEnd
  NodeStyle: BoxIcon
  PROCESS_VISIBILITY: SERVICE
  display: x=379,y=59,w=250,h=26
  requestMethod: POST
  requestParameters: '[["User","Body","true","User with optional groups","com.centurylink.mdw.tests.microservice/User.java","[0.2,1)"]]'
  requestPath: /user
  requestSummary: Create a user and add to workgroups
steps:
- id: S1
  name: Receive
  specifier: ply.start
  attributes:
    display: x=45,y=52,w=60,h=40
  links:
  - id: L1
    attributes:
      display: type=Elbow,x=100,y=68,xs=105&294&294,ys=72&72&138
    event: FINISH
    to: S6
- id: S2
  name: Response
  specifier: ply.stop
  attributes:
    display: x=626,y=532,w=60,h=40
- id: S3
  name: "Invoke\r\nServices"
  specifier: com.centurylink.mdw.microservice.OrchestratorActivity
  attributes:
    STATUS_AFTER_EVENT: Hold
    display: x=428,y=284,w=121,h=77
    parallel: ${parallel}
    synchronous: ${synchronous}
  links:
  - id: L7
    attributes:
      display: type=Elbow,x=489,y=378,xs=489&489,ys=365&402
    event: FINISH
    to: S10
- id: S4
  name: "Create\r\nPlan"
  specifier: com.centurylink.mdw.kotlin.ScriptActivity
  attributes:
    Output Documents: '["servicePlan"]'
    Rule: |-
      import com.centurylink.mdw.microservice.servicePlan
      import com.centurylink.mdw.model.Jsonable

      variables["servicePlan"] = servicePlan(runtimeContext) {
          services {
              microservice {
                  name = "admin/createUser"
                  method = "POST"
                  url = "${runtimeContext.props["mdw.services.url"]}/services/Users"
                  dependencies = "[[\"true\", \"admin/createGroup\", \"\"]]"
                  bindings {
                    "requestMapper" to "com.centurylink.mdw.tests.microservice/UserRequestMapper.groovy"
                    "responseMapper" to "com.centurylink.mdw.microservice/StatusResponseMapper.groovy"
                  }
              }
              microservice {
                  name = "admin/createGroup"
                  method = "POST"
                  url = "${runtimeContext.props["mdw.services.url"]}/services/Workgroups"
                  enabled = (variables["request"] as Jsonable).getJson().has("group")
                  bindings {
                    "requestMapper" to "com.centurylink.mdw.tests.microservice/GroupRequestMapper.groovy"
                    "responseMapper" to "com.centurylink.mdw.microservice/StatusResponseMapper.groovy"
                  }
              }
          }
      }
    SCRIPT: Kotlin Script
    display: x=237,y=282,w=118,h=75
  links:
  - id: L3
    attributes:
      display: type=Elbow,x=391,y=320,xs=359&424,ys=320&320
    event: FINISH
    to: S3
- id: S5
  name: "Consolidate\r\nResponses"
  specifier: com.centurylink.mdw.microservice.ResponseCollector
  attributes:
    consolidator: com.centurylink.mdw.microservice.CombiningConsolidator
    display: x=430,y=520,w=120,h=73
  links:
  - id: L4
    attributes:
      display: type=Elbow,x=590,y=551,xs=554&622,ys=552&552
    event: FINISH
    to: S2
- id: S6
  name: "Validate\r\nRequest"
  specifier: com.centurylink.mdw.workflow.activity.validate.SwaggerValidatorActivity
  attributes:
    Validate: '["Query","Body"]'
    display: x=238,y=142,w=118,h=75
  links:
  - id: L5
    attributes:
      display: type=Elbow,x=140,y=178,xs=234&109,ys=177&177
    event: FINISH
    to: S7
    result: 'false'
  - id: L6
    attributes:
      display: type=Elbow,x=302,y=242,xs=296&296,ys=221&277
    event: FINISH
    to: S4
    result: 'true'
- id: S7
  name: Reject
  specifier: ply.stop
  attributes:
    display: x=45,y=157,w=60,h=40
- id: S9
  name: Accepted
  specifier: ply.stop
  attributes:
    display: x=629,y=421,w=60,h=40
- id: S10
  name: |-
    Synchronous
    Response?
  specifier: com.centurylink.mdw.workflow.activity.script.ScriptExecutorActivity
  attributes:
    Output Documents: '["response"]'
    Rule: |
      import com.centurylink.mdw.model.StatusResponse
      import static com.centurylink.mdw.model.Status.ACCEPTED

      if (synchronous) {
          return true
      }
      else {
          // populate the 202 response
          response = new StatusResponse(ACCEPTED).getJson()
          return false
      }
    SCRIPT: Groovy
    display: x=430,y=406,w=122,h=73
  links:
  - id: L8
    attributes:
      display: type=Elbow,x=497,y=491,xs=490&490,ys=483&516
    event: FINISH
    to: S5
    result: 'true'
  - id: L9
    attributes:
      display: type=Elbow,x=575,y=423,xs=556&625,ys=441&441
    event: FINISH
    to: S9
    result: 'false'
variables:
  parallel:
    type: java.lang.Boolean
  request:
    type: com.centurylink.mdw.model.Jsonable
  requestHeaders:
    type: java.util.Map<String,String>
  response:
    type: org.json.JSONObject
  responseHeaders:
    type: java.util.Map<String,String>
  servicePlan:
    type: org.yaml.snakeyaml.Yaml
  serviceSummary:
    type: com.centurylink.mdw.model.Jsonable
  synchronous:
    type: java.lang.Boolean
